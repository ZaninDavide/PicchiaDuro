<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_pg_des_f</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>able_move_left = true;
able_move_right = true;
able_move_up = true;
able_move_left = true;
able_double_jump = true;
able_wall_jump = true;

able_sword_h = true;
able_sword_d = true;

my_vspeed = 0;
my_hspeed = 0;


action = "fermo";

jump_speed = 20;
move_speed = 10;
original_move_speed = move_speed;
acceleration = 3;

grav = 1;

double_jump = 0; //0 = a terra, 1 = fatto un salto, 2 = fatto il secondo salto
max_double_jump = 3; // numero massimo di salti

have_to_walljump = 0; //0=no, 1=des, -1=sin;

/* 
fermo, des, sin, scala, s_down, s_des, s_sin, b_sin, b_des
*/

sprite_index = spr_pg_des_f;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Variabili:
//Keys:
mouse_left = mouse_check_button_pressed(mb_left);
mouse_right = mouse_check_button_pressed(mb_right);

left = keyboard_check(vk_left) || keyboard_check(ord("A")) || (gamepad_axis_value(0, gp_axislh) &lt; -0.1);
right = keyboard_check(vk_right) || keyboard_check(ord("D")) || (gamepad_axis_value(0, gp_axislh) &gt; 0.1);
up = keyboard_check(vk_up) || keyboard_check(ord("W")) || gamepad_button_check(0, gp_face1);
down = keyboard_check(vk_down) || keyboard_check(ord("S"));

up_pressed = keyboard_check_pressed(vk_up) || keyboard_check_pressed(ord("W")) || gamepad_button_check_pressed(0, gp_face1);
up_released = keyboard_check_released(vk_up) || keyboard_check_released(ord("W")) || gamepad_button_check_released(0, gp_face1)

space = keyboard_check(vk_space);
shift = keyboard_check(vk_shift);

press_x = keyboard_check(ord("X"));
press_z = keyboard_check(ord("Z"));

collision_left_wall_jump = place_meeting(x - 1, y, obj_collision_pg);
collision_right_wall_jump = place_meeting(x + 1, y, obj_collision_pg);
// LEFT MOVEMENT
if(have_to_walljump = 1){
    my_hspeed = move_speed*2;
}else if(have_to_walljump = -1){
    my_hspeed = -move_speed*2;
}else if(left and able_move_left and !right and my_hspeed &gt; -move_speed){
    my_hspeed -= acceleration;
}else if(right and able_move_right and !left and my_hspeed &lt; move_speed){
    my_hspeed += acceleration;
}

if(have_to_walljump = 0){
    if(!right and !left and my_hspeed != 0){
        before_sign = sign(my_hspeed);
        my_hspeed += acceleration * -sign(my_hspeed);
        if((before_sign = 1 and my_hspeed &lt; 0) || before_sign = -1 and my_hspeed &gt; 0){my_hspeed = 0;}
        if(my_hspeed &gt; move_speed){my_hspeed = move_speed}
        if(my_hspeed &lt; -move_speed){my_hspeed = -move_speed}
    }
}
if(my_hspeed &gt; move_speed){my_hspeed -= min(acceleration / 3, abs(my_hspeed - move_speed))}
if(my_hspeed &lt; -move_speed){my_hspeed += min(acceleration / 3, abs(my_hspeed - move_speed))}
have_to_walljump = 0;

if(my_hspeed &lt; 0){
    if(place_meeting(x + my_hspeed, y, obj_collision_pg)){
        nudge = my_hspeed + 1;
        while(place_meeting(x + nudge, y, obj_collision_pg) and nudge &lt; 0){
            nudge += 1;
        }
        my_hspeed = nudge;
    }
}else if(my_hspeed &gt; 0){
    if(place_meeting(x + my_hspeed, y, obj_collision_pg)){
        nudge = my_hspeed - 1;
        while(place_meeting(x + nudge, y, obj_collision_pg) and nudge &gt; 0){
            nudge -= 1;
        }
        my_hspeed = nudge;
    }
}
// gestione pedane
if(place_meeting(x, y + 1, obj_moving_block)){
    m_object = instance_place(x, y + 1, obj_moving_block);
    my_movingo_hspeed = m_object.movingo_hspeed;
    if(my_movingo_hspeed &lt; 0){
        if(place_meeting(x + my_movingo_hspeed, y, obj_collision_pg)){
            nudge = my_movingo_hspeed + 1;
            while(place_meeting(x + nudge, y, obj_collision_pg) and nudge &lt; 0){
                nudge += 1;
            }
           my_movingo_hspeed = nudge;
        }
    }else if(my_movingo_hspeed &gt; 0){
        if(place_meeting(x + my_movingo_hspeed, y, obj_collision_pg)){
            nudge = my_movingo_hspeed - 1;
            while(place_meeting(x + nudge, y, obj_collision_pg) and nudge &gt; 0){
                nudge -= 1;
            }
            my_movingo_hspeed = nudge;
        }
    }
    x += my_movingo_hspeed;
    /*if(place_meeting(x + 1, y, m_object) and m_object.movingo_hspeed &lt; 0 and my_hspeed &gt; m_object.movingo_hspeed){
        my_hspeed = m_object.movingo_hspeed;
    }else if(place_meeting(x - 1, y, m_object) and m_object.movingo_hspeed &gt; 0 and my_hspeed &lt; m_object.movingo_hspeed){
        my_hspeed = m_object.movingo_hspeed;
    }else{
        my_hspeed += m_object.movingo_hspeed;
    }*/
}

x += my_hspeed;

// VERTICAL MOVEMENT
my_vspeed += grav;
if(place_meeting(x, y + 1, obj_collision_pg)){
    double_jump = 0;
}
if(able_move_up){
    if(double_jump = 0 and place_meeting(x, y + 1, obj_collision_pg) and up){
        my_vspeed = -jump_speed;
        double_jump += 1;
    }else if(collision_left_wall_jump and able_wall_jump and up){ //wall_jump_right   
        my_vspeed = -jump_speed;
        have_to_walljump = 1;
    }else if(collision_right_wall_jump and able_wall_jump and up){ //wall_jump_left   
        my_vspeed = -jump_speed;
        have_to_walljump = -1;
    }else if(double_jump &gt; 0 and double_jump &lt; max_double_jump and up_pressed and able_double_jump){
        my_vspeed = -jump_speed;
        double_jump += 1;
    }
}
if(my_vspeed &lt; 0 and place_meeting(x, y + my_vspeed, obj_collision_pg)){
        nudge = my_vspeed + 1;
        while(place_meeting(x, y + nudge, obj_collision_pg) and nudge &lt; 0){
            nudge += 1;
        }
        my_vspeed = nudge;
}else if(my_vspeed &gt; 0 and place_meeting(x, y + my_vspeed, obj_collision_pg)){
        nudge = my_vspeed - 1;
        while(place_meeting(x, y + nudge, obj_collision_pg) and nudge &gt; 0){
            nudge -= 1;
        }
        my_vspeed = nudge;
}
y += my_vspeed;

















</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="82">
      <action>
        <libid>1</libid>
        <id>223</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_current_room</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.800000011920929</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.5</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>-1</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,14</point>
    <point>40,14</point>
    <point>40,82</point>
    <point>0,82</point>
  </PhysicsShapePoints>
</object>
